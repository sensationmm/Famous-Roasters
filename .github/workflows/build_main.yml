# This workflow will run tests and build the docker container
# for any branch different to main

name: Test, Build and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      region:
        description: 'AWS Region to deploy to'
        required: true
        default: 'eu-central-1'

jobs:
  test-build-deploy-staging:
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Setup node
        uses: actions/setup-node@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/docker-compose.yml') }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ hashFiles('**/docker-compose.yml') }}

      - name: Cache node modules
        uses: actions/cache@v2
        id: cache
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: yarn install

      - name: Lint & Prettier
        run: |
          yarn prettier
          yarn lint

      - name: Unit Tests
        run: yarn run test:ci -u
        env:
          REACT_APP_DOMAIN_SHOP: ${{ secrets.REACT_APP_DOMAIN_SHOP_STAGING }}
          REACT_APP_DOMAIN_BLOG: ${{ secrets.REACT_APP_DOMAIN_BLOG_STAGING }}

      - uses: actions/upload-artifact@master
        with:
          name: coverage
          path: coverage

      - name: Build & Package
        run: yarn run build && npx semantic-release --debug
        env:
          REACT_APP_DOMAIN_SHOP: ${{ secrets.REACT_APP_DOMAIN_SHOP_STAGING }}
          REACT_APP_DOMAIN_BLOG: ${{ secrets.REACT_APP_DOMAIN_BLOG_STAGING }}
          REACT_APP_HYGRAPH_CONTENT_GRAPHQL_ENDPOINT: ${{ secrets.REACT_APP_HYGRAPH_CONTENT_GRAPHQL_ENDPOINT}}
          REACT_APP_SHOPIFY_ADMIN_GRAPHQL_ENDPOINT: ${{ secrets.REACT_APP_SHOPIFY_ADMIN_GRAPHQL_ENDPOINT}}
          REACT_APP_SHOPIFY_ADMIN_ACCESS_TOKEN: ${{ secrets.REACT_APP_SHOPIFY_ADMIN_ACCESS_TOKEN}}
          REACT_APP_SHOPIFY_STOREFRONT_GRAPHQL_ENDPOINT: ${{ secrets.REACT_APP_SHOPIFY_STOREFRONT_GRAPHQL_ENDPOINT }}
          REACT_APP_SHOPIFY_STOREFRONT_ACCESS_TOKEN: ${{ secrets.REACT_APP_SHOPIFY_STOREFRONT_ACCESS_TOKEN }}
          REACT_APP_FAMOUS_ROASTERS_GRAPHQL_ENDPOINT: ${{ secrets.REACT_APP_FAMOUS_ROASTERS_GRAPHQL_ENDPOINT_STAGING }}
          REACT_APP_FAMOUS_ROASTERS_ORDERS_ENDPOINT: ${{ secrets.REACT_APP_FAMOUS_ROASTERS_ORDERS_ENDPOINT_STAGING }}
          REACT_APP_COGNITO_REGION: ${{ secrets.REACT_APP_COGNITO_REGION_STAGING }}
          REACT_APP_COGNITO_USER_POOL_ID: ${{ secrets.REACT_APP_COGNITO_USER_POOL_ID_STAGING }}
          REACT_APP_COGNITO_CLIENT_ID: ${{ secrets.REACT_APP_COGNITO_CLIENT_ID_STAGING }}
          REACT_APP_COGNITO_DOMAIN: ${{ secrets.REACT_APP_COGNITO_DOMAIN }}
          REACT_APP_COGNITO_CALLBACK_SIGNIN: ${{ secrets.REACT_APP_COGNITO_CALLBACK_SIGNIN }}
          REACT_APP_COGNITO_CALLBACK_SIGNOUT: ${{ secrets.REACT_APP_COGNITO_CALLBACK_SIGNOUT }}
          REACT_APP_SENTRY_DSN: ${{ secrets.REACT_APP_SENTRY_DSN }}
          REACT_APP_SENTRY_TRACE_SAMPLE_RATE: ${{ secrets.REACT_APP_SENTRY_TRACE_SAMPLE_RATE }}
          REACT_APP_ALGOLIA_APP_ID: ${{ secrets.REACT_APP_ALGOLIA_APP_ID }}
          REACT_APP_ALGOLIA_API_KEY: ${{ secrets.REACT_APP_ALGOLIA_API_KEY }}
          REACT_APP_GTM_ID: ${{ secrets.REACT_APP_GTM_ID }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto Minify
        uses: nizarmah/auto-minify@v2.1.1
        with:
          overwrite: true
          js_engine: uglify-js
          directory: build

      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: eu-central-1

      - name: Push to S3
        run: aws s3 sync build/ s3://famous-roasters-frontend-staging

  sonarcloud:
    name: SonarCloud
    needs: test-build-deploy-staging
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@master
        with:
          name: coverage
          path: coverage

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.verbose=true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  storybook:
    name: Storybook
    needs: test-build-deploy-staging
    environment: storybook-staging
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Setup node
        uses: actions/setup-node@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/docker-compose.yml') }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ hashFiles('**/docker-compose.yml') }}

      - name: Cache node modules
        uses: actions/cache@v2
        id: cache
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: yarn install

      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: eu-central-1

      - name: Deploy storybook
        run: yarn deploy-storybook --ci --host-token-env-variable=GITHUB_TOKEN --aws-profile=NONE --bucket-path=famous-roasters-storybook-staging
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-build-deploy-prod:
    environment: prod
    needs:
      - test-build-deploy-staging
      - sonarcloud
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Setup node
        uses: actions/setup-node@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/docker-compose.yml') }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ hashFiles('**/docker-compose.yml') }}

      - name: Cache node modules
        uses: actions/cache@v2
        id: cache
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: yarn install

      - name: Build & Package
        run: yarn run build
        env:
          REACT_APP_DOMAIN_SHOP: ${{ secrets.REACT_APP_DOMAIN_SHOP_PRODUCTION }}
          REACT_APP_DOMAIN_BLOG: ${{ secrets.REACT_APP_DOMAIN_BLOG_PRODUCTION }}
          REACT_APP_HYGRAPH_CONTENT_GRAPHQL_ENDPOINT: ${{ secrets.REACT_APP_HYGRAPH_CONTENT_GRAPHQL_ENDPOINT}}
          REACT_APP_SHOPIFY_ADMIN_GRAPHQL_ENDPOINT: ${{ secrets.REACT_APP_SHOPIFY_ADMIN_GRAPHQL_ENDPOINT}}
          REACT_APP_SHOPIFY_ADMIN_ACCESS_TOKEN: ${{ secrets.REACT_APP_SHOPIFY_ADMIN_ACCESS_TOKEN}}
          REACT_APP_SHOPIFY_STOREFRONT_GRAPHQL_ENDPOINT: ${{ secrets.REACT_APP_SHOPIFY_STOREFRONT_GRAPHQL_ENDPOINT }}
          REACT_APP_SHOPIFY_STOREFRONT_ACCESS_TOKEN: ${{ secrets.REACT_APP_SHOPIFY_STOREFRONT_ACCESS_TOKEN }}
          REACT_APP_FAMOUS_ROASTERS_GRAPHQL_ENDPOINT: ${{ secrets.REACT_APP_FAMOUS_ROASTERS_GRAPHQL_ENDPOINT_PRODUCTION }}
          REACT_APP_FAMOUS_ROASTERS_ORDERS_ENDPOINT: ${{ secrets.REACT_APP_FAMOUS_ROASTERS_ORDERS_ENDPOINT_PRODUCTION }}
          REACT_APP_COGNITO_REGION: ${{ secrets.REACT_APP_COGNITO_REGION_PRODUCTION }}
          REACT_APP_COGNITO_USER_POOL_ID: ${{ secrets.REACT_APP_COGNITO_USER_POOL_ID_PRODUCTION }}
          REACT_APP_COGNITO_CLIENT_ID: ${{ secrets.REACT_APP_COGNITO_CLIENT_ID_PRODUCTION }}
          REACT_APP_COGNITO_DOMAIN: ${{ secrets.REACT_APP_COGNITO_DOMAIN_PRODUCTION }}
          REACT_APP_COGNITO_CALLBACK_SIGNIN: ${{ secrets.REACT_APP_COGNITO_CALLBACK_SIGNIN_PRODUCTION }}
          REACT_APP_COGNITO_CALLBACK_SIGNOUT: ${{ secrets.REACT_APP_COGNITO_CALLBACK_SIGNOUT_PRODUCTION }}
          REACT_APP_SENTRY_DSN: ${{ secrets.REACT_APP_SENTRY_DSN_PRODUCTION }}
          REACT_APP_SENTRY_TRACE_SAMPLE_RATE: ${{ secrets.REACT_APP_SENTRY_TRACE_SAMPLE_RATE_PRODUCTION }}
          REACT_APP_ALGOLIA_APP_ID: ${{ secrets.REACT_APP_ALGOLIA_APP_ID }}
          REACT_APP_ALGOLIA_API_KEY: ${{ secrets.REACT_APP_ALGOLIA_API_KEY }}
          REACT_APP_GTM_ID: ${{ secrets.REACT_APP_GTM_ID }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Push to S3
        run: aws s3 sync build/ s3://famous-roasters-frontend-production
